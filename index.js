require("dotenv").config();
const { Client, GatewayIntentBits, PermissionFlagsBits } = require("discord.js");
const express = require("express");

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildPresences,
  ],
});

const app = express();
const PORT = process.env.PORT || 3000;

// ====== C·∫•u h√¨nh Role ‚Äì Category ======
const ROLE_CATEGORY_MAP = [
  { roleId: "1410990099042271352", categoryId: "1411043139728314478" },
  { roleId: "1410990099042271352", categoryId: "1411049289685270578" },
  { roleId: "1428899344010182756", categoryId: "1428927402444325024" },
];

// ====== Delay nh·∫π ƒë·ªÉ gi·∫£m kh·∫£ nƒÉng rate-limit (t√πy ch·ªânh n·∫øu c·∫ßn) ======
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// ====== C·∫≠p nh·∫≠t counter (t√πy ch·ªçn gi·ªØ l·∫°i) ======
async function updateCounters(online = true) {
  try {
    const guild = await client.guilds.fetch(process.env.GUILD_ID);
    await guild.members.fetch();

    const chAll = guild.channels.cache.get(process.env.CH_ALL);
    const chMembers = guild.channels.cache.get(process.env.CH_MEMBERS);
    const chServer = guild.channels.cache.get(process.env.CH_SERVER);

    if (!chAll || !chMembers || !chServer) {
      return console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y channel counter (CH_ALL / CH_MEMBERS / CH_SERVER).");
    }

    const total = guild.memberCount;
    const humans = guild.members.cache.filter(m => !m.user.bot).size;

    await Promise.allSettled([
      chAll.setName(`‚ï≠ All Members: ${total}`),
      chMembers.setName(`‚îä Members: ${humans}`),
      chServer.setName(`‚ï∞ Server: ${online ? "üü¢ Active" : "üî¥ Offline"}`),
    ]);

    console.log(`‚úÖ Counter ‚Üí T·ªïng: ${total}, Ng∆∞·ªùi: ${humans}, Tr·∫°ng th√°i: ${online ? "Online" : "Offline"}`);
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t counter:", err);
  }
}

// ====== H√†m ch√≠nh: x·ª≠ l√Ω visibility cho 1 member & 1 role ======
// hasRole === true  => member c√≥ role ‚Üí X√ìA member overwrite n·∫øu c√≥ deny ViewChannel
// hasRole === false => member kh√¥ng c√≥ role => TH√äM/SET member overwrite ViewChannel: false (·∫©n)
async function handleRoleVisibilityForMember(member, roleId, hasRole) {
  const guild = member.guild;
  const configs = ROLE_CATEGORY_MAP.filter(c => c.roleId === roleId);

  // l·∫•y danh s√°ch category t∆∞∆°ng ·ª©ng v·ªõi role n√†y
  for (const cfg of configs) {
    const category = guild.channels.cache.get(cfg.categoryId);
    if (!category) {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y category ID ${cfg.categoryId} (role ${roleId})`);
      continue;
    }

    // L·∫•y t·∫•t c·∫£ channel con trong category (kh√¥ng ch·ªânh category)
    const channels = [...category.children.cache.values()];

    console.log(`\nüë§ ${member.user.tag} | RoleID: ${roleId} | Category: ${category.name} | hasRole: ${hasRole}`);
    for (const channel of channels) {
      try {
        // CH√ö √ù: ch·ªâ thao t√°c v·ªõi member overwrite, KH√îNG ƒë·ªông t·ªõi role overwrite hay category overwrite
        const memberOverwrite = channel.permissionOverwrites.cache.get(member.id);

        if (hasRole) {
          // Member c√≥ role -> n·∫øu c√≥ deny ViewChannel ·ªü m·ª©c member th√¨ x√≥a overwrite c·ªßa member (restore inheritance)
          if (memberOverwrite && memberOverwrite.deny.has(PermissionFlagsBits.ViewChannel)) {
            await channel.permissionOverwrites.delete(member.id).catch(err => {
              console.warn(`‚ö†Ô∏è X√≥a overwrite th·∫•t b·∫°i cho ${channel.name}:`, err?.message || err);
            });
            console.log(`‚úÖ ƒê√£ x√≥a overwrite (m·ªü) cho ${channel.name}`);
          } else {
            // kh√¥ng c√≥ deny member -> kh√¥ng l√†m g√¨
          }
        } else {
          // Member kh√¥ng c√≥ role -> set deny ViewChannel cho member (·∫©n ri√™ng ng∆∞·ªùi ƒë√≥)
          await channel.permissionOverwrites.edit(member.id, { ViewChannel: false }).catch(err => {
            console.warn(`‚ö†Ô∏è Set deny th·∫•t b·∫°i cho ${channel.name}:`, err?.message || err);
          });
          console.log(`üö´ ƒê√£ ƒë·∫∑t deny ViewChannel cho ${channel.name}`);
        }

        // Delay nh·∫π gi·ªØa c√°c ch·ªânh s·ª≠a (t√πy ch·ªânh n·∫øu c·∫ßn)
        await delay(200);
      } catch (err) {
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω k√™nh ${channel.name}:`, err);
      }
    } // end for channels

    console.log(`‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω category "${category.name}" (${channels.length} k√™nh) cho member ${member.user.tag}`);
  } // end for configs
}

// ====== Event: ph√°t hi·ªán role thay ƒë·ªïi tr√™n member ======
client.on("guildMemberUpdate", async (oldMember, newMember) => {
  try {
    // ƒë·∫£m b·∫£o cache roles
    const oldRoles = oldMember.roles.cache;
    const newRoles = newMember.roles.cache;

    // L·∫•y t·∫•t c·∫£ roleId duy nh·∫•t trong map, ki·ªÉm tra role n√†o thay ƒë·ªïi
    const uniqueRoleIds = [...new Set(ROLE_CATEGORY_MAP.map(r => r.roleId))];

    // role n√†o c√≥ thay ƒë·ªïi tr·∫°ng th√°i gi·ªØa old vs new -> x·ª≠ l√Ω
    const changed = uniqueRoleIds.filter(roleId => oldRoles.has(roleId) !== newRoles.has(roleId));
    if (changed.length === 0) return;

    console.log(`\n‚öôÔ∏è Ph√°t hi·ªán thay ƒë·ªïi role cho ${newMember.user.tag}:`, changed);

    // x·ª≠ l√Ω t·ª´ng role thay ƒë·ªïi (m·ªói role c√≥ th·ªÉ map t·ªõi nhi·ªÅu category)
    for (const roleId of changed) {
      const hasRole = newRoles.has(roleId);
      // g·ªçi h√†m x·ª≠ l√Ω ch√≠nh
      await handleRoleVisibilityForMember(newMember, roleId, hasRole);
    }
  } catch (err) {
    console.error("‚ùå L·ªói trong guildMemberUpdate handler:", err);
  }
});

// ====== Ready: c·∫≠p nh·∫≠t counter (n·∫øu b·∫°n d√πng) ======
client.once("ready", async () => {
  console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: ${client.user.tag}`);

  // c·∫≠p nh·∫≠t counter khi start
  await updateCounters(true);
  // ƒë·∫∑t interval n·∫øu mu·ªën
  setInterval(() => updateCounters(true), 5 * 60 * 1000);
});

// ====== Keep-alive web endpoint ======
app.get("/", (req, res) => res.send("‚úÖ Bot is alive"));
app.listen(PORT, () => console.log(`üåê Keep-alive ch·∫°y c·ªïng ${PORT}`));

// ====== Shutdown x·ª≠ l√Ω ======
async function shutdown() {
  try { await updateCounters(false); } catch (e) {}
  console.log("üî¥ Bot t·∫Øt");
  process.exit(0);
}
process.on("SIGINT", shutdown);
process.on("SIGTERM", shutdown);

// ====== Login ======
client.login(process.env.TOKEN);
